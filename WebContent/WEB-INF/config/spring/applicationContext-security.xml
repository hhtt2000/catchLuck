<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.1.xsd
	">

	<security:global-method-security
		jsr250-annotations="enabled" pre-post-annotations="enabled" />

	<security:http auto-config="true"
		entry-point-ref="authenticationProcessingFilterEntryPoint"
		use-expressions="true">
		<security:intercept-url pattern="/#{l1j5Prop['url.login']}"
			access="permitAll" />
		<security:intercept-url pattern="/#{l1j5Prop['url.join']}/**"
			access="permitAll" />
		<security:intercept-url pattern="/error/**"
			access="permitAll" />
		<security:intercept-url pattern="/js/**"
			access="permitAll" /><!-- ** : js로 들어오면 모든 사람에게 권한을 준다. -->
		<security:intercept-url pattern="/css/**"
			access="permitAll" />
		<security:intercept-url pattern="/img/**"
			access="permitAll" />
		<security:intercept-url pattern="/rsc/**"
			access="permitAll" />
		<security:intercept-url pattern="/sys/**"
			access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/**"
			access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<security:form-login login-page="/#{l1j5Prop['url.login']}"
			authentication-failure-handler-ref="authenticationFailureHandler"
			authentication-success-handler-ref="authenticationSuccessHandler" />
		<security:logout invalidate-session="true"
			success-handler-ref="logoutSuccessHandler" />
		<!-- security:remember-me key="#{l1j5Prop['cookie.key.rememberme']}" token-validity-seconds="3600" 
			data-source-ref="dataSource" / -->
		<security:remember-me services-ref="rememberMeServices" />
		<security:session-management>
			<security:concurrency-control
				max-sessions="5" />
		</security:session-management>
		<security:access-denied-handler ref="accessDeniedHandler" />
	</security:http>

	<!-- 쿠키에 값을 세팅해서 다음 사용시 값을 기억하는.... -->
	<bean id="rememberMeServices"
		class="com.l1j5.web.common.extend.security.VSRememberMeServices">
		<property name="tokenRepository" ref="jdbcTokenRepository" />
		<property name="userDetailsService" ref="jdbcUserServiceCustom" />
		<property name="key" value="#{l1j5Prop['cookie.key.rememberme']}" />
		<property name="alwaysRemember" value="false" />
		<property name="tokenValiditySeconds" value="1209600" />
		<!-- property name="parameter" value="_spring_security_remember_me" / -->
	</bean>

	<bean id="jdbcTokenRepository"
		class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
		<property name="createTableOnStartup" value="false" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="authenticationProcessingFilterEntryPoint"
		class="com.l1j5.web.common.extend.security.VSLoginAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/#{l1j5Prop['url.login']}" />
		<property name="forceHttps" value="false" />
	</bean>

	<!-- Authentication failure handler -->
	<bean id="authenticationFailureHandler"
		class="com.l1j5.web.common.extend.security.VSAuthenticationFailureHandler" />

	<!-- Authentication success handler -->
	<bean id="authenticationSuccessHandler"
		class="com.l1j5.web.common.extend.security.VSAuthenticationSuccessHandler" />

	<!-- Logout success handler -->
	<bean id="logoutSuccessHandler"
		class="com.l1j5.web.common.extend.security.VSLogoutSuccessHandler" />

	<!-- Logout success handler -->
	<bean id="accessDeniedHandler"
		class="com.l1j5.web.common.extend.security.VSAccessDeniedHandler" />

	<bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<!-- PasswordEncoder exercise -->
	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />

	<!-- UserDetailsService: user custom table -->
	<bean id="jdbcUserServiceCustom"
		class="com.l1j5.web.common.mvc.model.dao.impl.SecurityManagerDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="enableGroups" value="false" />
		<property name="enableAuthorities" value="true" />
		<property name="usersByUsernameQuery">
			<value>
				SELECT m.cid, m.password, m.name, m.phone, m.email, m.address
				FROM member m
				WHERE m.cid = ?
			</value>
		</property>
	</bean>

	<bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<property name="key" value="#{l1j5Prop['cookie.key.rememberme']}" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="rememberMeAuthenticationProvider" />
		<security:authentication-provider
			user-service-ref="jdbcUserServiceCustom">
			<security:password-encoder ref="passwordEncoder">
			</security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>


</beans>